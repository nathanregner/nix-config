From c5744efd558ba1dd3db7c2bc2152511556d4454a Mon Sep 17 00:00:00 2001
From: Shamrock Lee <44064051+ShamrockLee@users.noreply.github.com>
Date: Thu, 10 Feb 2022 10:40:03 +0800
Subject: [PATCH] src/main.sh: Add --[extra-]experimental-features support

*   Default to using --extra-experimental-features
    instead of --experimental-features
    to show respect to the environment configuration.

*   Add flags --extra-experimental-features and --experimental-features
    to allow manual specification to the experimental-features setting
    (e.g. use `builtins.getFlake` when not globally enabled).
---
 CHANGELOG.md                         |  5 +++
 contrib/nix-prefetch-completion.bash |  3 +-
 contrib/nix-prefetch-completion.zsh  |  1 +
 doc/nix-prefetch.1.asciidoc          |  7 ++++
 src/main.sh                          | 51 +++++++++++++++++++++++++---
 5 files changed, 62 insertions(+), 5 deletions(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index cfe9db1..546f675 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,8 @@
+## 0.4.2
+
+- The main script now defaults to pass to Nix `--extra-experimental-features` instead of `--experimental-features` to pay respect to the environment configuration.
+- Add `--experimental-features` and `--extra-experimental-features` flags to allow temporary configuration overriding. One use case is to enable `builtins.getFlake` when not globally enabled.
+
 ## 0.4.1

 - More compatible empty check in regex.
diff --git a/contrib/nix-prefetch-completion.bash b/contrib/nix-prefetch-completion.bash
index 95327e3..5afa0dc 100644
--- a/contrib/nix-prefetch-completion.bash
+++ b/contrib/nix-prefetch-completion.bash
@@ -21,7 +21,8 @@ _nix_prefetch() {
   # Indenting with spaces is required to still make " $prev_word " work.
   local params='
     -f --file -A --attr -E --expr -i --index -F --fetcher --arg --argstr -I --option
-    -t --type --hash-algo -h --hash --input --output --eval '
+    -t --type --hash-algo -h --hash --input --output --eval
+    --experimental-features --extra-experimental-features '
   local flags=' -s --silent -q --quiet -v --verbose -vv --debug -l --list --version ' flag
   for flag in --fetchurl --force-https --print-urls --print-path --compute-hash --check-store --autocomplete --help --deep; do
     flags+=" --no-${flag#--} $flag "
diff --git a/contrib/nix-prefetch-completion.zsh b/contrib/nix-prefetch-completion.zsh
index ab0f3fb..b451178 100644
--- a/contrib/nix-prefetch-completion.zsh
+++ b/contrib/nix-prefetch-completion.zsh
@@ -21,6 +21,7 @@ _nix_prefetch() {
   local params=(
     '-f' '--file' '-A' '--attr' '-E' '--expr' '-i' '--index' '-F' '--fetcher' '--arg' '--argstr' '-I' '--option'
     '-t' '--type' '--hash-algo' '-h' '--hash' '--input' '--output' '--eval'
+    '--experimental-features' '--extra-experimental-features'
   )
   local flags=( -s --silent -q --quiet -v --verbose -vv --debug -l --list --version ) flag
   for flag in --fetchurl --force-https --print-urls --print-path --compute-hash --check-store --autocomplete --help --deep; do
diff --git a/doc/nix-prefetch.1.asciidoc b/doc/nix-prefetch.1.asciidoc
index 44b3e17..0b6500a 100644
--- a/doc/nix-prefetch.1.asciidoc
+++ b/doc/nix-prefetch.1.asciidoc
@@ -18,6 +18,7 @@ nix-prefetch - Prefetch any fetcher function call, e.g. package sources
               [*--input* <input-type>] [*--output* <output-type>] [*--print-urls*] [*--print-path*]
               [*--compute-hash*] [*--check-store*] [*-s* | *--silent*] [*-q* | *--quiet*] [*-v* | *--verbose*] [*-vv* | *--debug*] ...
               ([*-f* | *--file*] <file> | [*-A* | *--attr*] <attr> | [*-E* | *--expr*] <expr> | <url>) [<hash>]
+              [ *--experimental-features* | *--extra-experimental-features* ]
               [*--help* | *--autocomplete* | *--eval* <expr>]
               [*--*] [*--<name>* ((*-f* | *--file*) <file> | (*-A* | *--attr*) <attr> | (*-E* | *--expr*) <expr> | <str>)] ...
  *nix-prefetch* [(*-f* | *--file*) <file>] [*--deep*] [*-s* | *--silent*] [*-v* | *--verbose*] [*-vv* | *--debug*] ... (*-l* | *--list*)
@@ -133,6 +134,12 @@ and can placed both before and after the parameters.
 *--deep*::
   Rather than only listing the top-level fetchers, deep search Nixpkgs for fetchers (slow).

+*--experimental-features*::
+  Set the Nix experimental-features setting.
+
+*--extra-experimental-features*::
+  Append to the Nix experimental-features setting.
+
 *-s*, *--silent*::
   No output to 'stderr'.

diff --git a/src/main.sh b/src/main.sh
index 680e4c7..76c6c36 100755
--- a/src/main.sh
+++ b/src/main.sh
@@ -157,12 +157,40 @@ EOF
   fi
 }

-# The version of Nix with Flakes support requires the expression to be passed through flags,
-# which are not present in previous versions, so to be backwards compatible, we conditionally pass them.
-# The `nix-command` feature is not enabled by default, so enable it explicitly just in case.
-nix flake --help &>/dev/null && nix_eval_expr_args=( --experimental-features nix-command --impure --expr ) || nix_eval_expr_args=()
+declare -A experimental_features_status=()
+concat_experimental_features() {
+  local -a experimental_features_array=()
+  for feature in "${!experimental_features_status[@]}"; do
+    (( "${experimental_features_status[$feature]}" )) && experimental_features_array+=( "$feature" );
+  done
+  (( debug )) && echo "Experimnetal Nix features" "${experimental_features_array[@]}" "are enabled" >&2 || true
+  echo "${experimental_features_array[@]}"
+}
+
+declare -i support_flakes
+nix flake --help &>/dev/null && support_flakes=1 || support_flakes=0
 nix_eval_args=()
+# Use --extra-experimental-features by default
+force_experimental_features=0
 nix_eval() {
+  # The version of Nix with Flakes support requires the expression to be passed through flags,
+  # which are not present in previous versions, so to be backwards compatible, we conditionally pass them.
+  # The `nix-command` feature is not enabled by default, so enable it explicitly just in case.
+  local -a nix_eval_expr_args=()
+  if (( support_flakes )); then
+    for feature in "nix-command"; do
+      if (( force_experimental_features )); then
+        (( "${experimental_features_status[$feature]}" )) || die "nix-prefetch expects experimental Nix feature $feature"
+      else
+        experimental_features_status[$feature]=1
+      fi
+    done
+    (( force_experimental_features )) \
+      && nix_eval_expr_args+=( --experimental-features ) \
+      || nix_eval_expr_args+=( --extra-experimental-features )
+    nix_eval_expr_args+=( "$(concat_experimental_features)" )
+    nix_eval_expr_args+=( --impure --expr )
+  fi
   local output_type=$1; shift
   local nix=$1; shift
   nix eval "$output_type" "${nix_eval_expr_args[@]}" "(
@@ -262,6 +290,7 @@ handle_common() {
   export NIX_PREFETCH=1
 }

+
 # Each command should be handled differently and to prevent issues like determinig their priorities,
 # we do not allow them to be mixed, so e.g. calling adding --version while also having other arguments,
 # will just result in the help message being shown with an error code.
@@ -356,6 +385,20 @@ while (( $# >= 1 )); do
       (( $# >= 2 )) || die_option_name_value
       nix_eval_args+=( --option "$1" "$2" ); shift; shift
       ;;
+    --extra-experimental-features)
+      (( support_flakes )) || die "The Nix executable $(nix --version) doesn't support specifying experimental features"
+      force_experimental_features=0
+      while read -r -d " " feature; do
+        [[ -n "$feature" ]] && experimental_features_status[$feature]=1 || true
+      done <<< "$1 "; shift
+      ;;
+    --experimental-features)
+      (( support_flakes )) || die "The Nix executable $(nix --version) doesn't support specifying experimental features"
+      force_experimental_features=1
+      while read -r -d " " feature; do
+        [[ -n "$feature" ]] && experimental_features_status[$feature]=1 || true
+      done <<< "$1 "; shift
+      ;;
     -s|--silent)  silent=1; quiet=1; verbose=0; debug=0;;
     -q|--quiet)   silent=0; quiet=1; verbose=0; debug=0;;
     -v|--verbose) silent=0; quiet=0; verbose=1;;

