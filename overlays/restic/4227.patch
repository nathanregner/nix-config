From 333d69b8427e84d5e739f6d02834ebaac1bd3756 Mon Sep 17 00:00:00 2001
From: civts <giacomo.zanolli@studenti.unitn.it>
Date: Thu, 2 Mar 2023 11:29:18 +0100
Subject: [PATCH 1/8] Add go-git package

---
 go.mod | 11 +++++++++++
 go.sum | 50 ++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 61 insertions(+)

diff --git a/go.mod b/go.mod
index be7d55b2a6f..30f0c94f3da 100644
--- a/go.mod
+++ b/go.mod
@@ -43,7 +43,9 @@ require (
 	github.com/cpuguy83/go-md2man/v2 v2.0.2 // indirect
 	github.com/dnaeon/go-vcr v1.2.0 // indirect
 	github.com/dustin/go-humanize v1.0.0 // indirect
+	github.com/emirpasic/gods v1.12.0 // indirect
 	github.com/felixge/fgprof v0.9.3 // indirect
+	github.com/go-git/go-git v4.7.0+incompatible // indirect
 	github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect
 	github.com/golang/protobuf v1.5.2 // indirect
 	github.com/google/pprof v0.0.0-20230111200839-76d1ae5aea2b // indirect
@@ -51,15 +53,21 @@ require (
 	github.com/googleapis/enterprise-certificate-proxy v0.2.1 // indirect
 	github.com/googleapis/gax-go/v2 v2.7.0 // indirect
 	github.com/inconshreveable/mousetrap v1.1.0 // indirect
+	github.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99 // indirect
 	github.com/json-iterator/go v1.1.12 // indirect
+	github.com/kevinburke/ssh_config v0.0.0-20190725054713-01f96b0aa0cd // indirect
 	github.com/klauspost/cpuid/v2 v2.2.3 // indirect
 	github.com/kr/fs v0.1.0 // indirect
 	github.com/minio/md5-simd v1.1.2 // indirect
+	github.com/mitchellh/go-homedir v1.1.0 // indirect
 	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
 	github.com/modern-go/reflect2 v1.0.2 // indirect
 	github.com/rs/xid v1.4.0 // indirect
 	github.com/russross/blackfriday/v2 v2.1.0 // indirect
+	github.com/sergi/go-diff v1.3.1 // indirect
 	github.com/sirupsen/logrus v1.9.0 // indirect
+	github.com/src-d/gcfg v1.4.0 // indirect
+	github.com/xanzy/ssh-agent v0.2.1 // indirect
 	go.opencensus.io v0.24.0 // indirect
 	golang.org/x/xerrors v0.0.0-20220907171357-04be3eba64a2 // indirect
 	google.golang.org/appengine v1.6.7 // indirect
@@ -67,6 +75,9 @@ require (
 	google.golang.org/grpc v1.52.0 // indirect
 	google.golang.org/protobuf v1.28.1 // indirect
 	gopkg.in/ini.v1 v1.67.0 // indirect
+	gopkg.in/src-d/go-billy.v4 v4.3.2 // indirect
+	gopkg.in/src-d/go-git.v4 v4.13.1 // indirect
+	gopkg.in/warnings.v0 v0.1.2 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
 )
 
diff --git a/go.sum b/go.sum
index 036dd354695..26606bd7964 100644
--- a/go.sum
+++ b/go.sum
@@ -20,8 +20,11 @@ github.com/Azure/azure-sdk-for-go/sdk/storage/azblob v0.5.1/go.mod h1:c6WvOhtmjN
 github.com/AzureAD/microsoft-authentication-library-for-go v0.5.1 h1:BWe8a+f/t+7KY7zH2mqygeUD0t8hNFXe08p1Pb3/jKE=
 github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=
 github.com/Julusian/godocdown v0.0.0-20170816220326-6d19f8ff2df8/go.mod h1:INZr5t32rG59/5xeltqoCJoNY7e5x/3xoY9WSWVWg74=
+github.com/alcortesm/tgz v0.0.0-20161220082320-9c5fe88206d7/go.mod h1:6zEj6s6u/ghQa61ZWa/C2Aw3RkjiTBOix7dkqa1VLIs=
 github.com/anacrolix/fuse v0.2.0 h1:pc+To78kI2d/WUjIyrsdqeJQAesuwpGxlI3h1nAv3Do=
 github.com/anacrolix/fuse v0.2.0/go.mod h1:Kfu02xBwnySDpH3N23BmrP3MDfwAQGRLUCj6XyeOvBQ=
+github.com/anmitsu/go-shlex v0.0.0-20161002113705-648efa622239/go.mod h1:2FmKhYUyUczH0OGQWaF5ceTx0UBShxjsH6f8oGKYe2c=
+github.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5/go.mod h1:wHh0iHkYZB8zMSxRWpUBQtwG5a7fFgvEO+odwuTv2gs=
 github.com/cenkalti/backoff/v4 v4.2.0 h1:HN5dHm3WBOgndBH6E8V0q2jIYIR3s9yglV8k/+MN3u4=
 github.com/cenkalti/backoff/v4 v4.2.0/go.mod h1:Y3VNntkOUPxTVeUxJ/G5vcM//AlwfmyYozVcomhLiZE=
 github.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=
@@ -34,6 +37,7 @@ github.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDk
 github.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=
 github.com/cpuguy83/go-md2man/v2 v2.0.2 h1:p1EgwI/C7NhT0JmVkwCD2ZBK8j4aeHQX2pMHHBfMQ6w=
 github.com/cpuguy83/go-md2man/v2 v2.0.2/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=
+github.com/creack/pty v1.1.7/go.mod h1:lj5s0c3V2DBrqTV7llrYr5NG6My20zk30Fl46Y7DoTY=
 github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
 github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
 github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
@@ -45,12 +49,18 @@ github.com/dvyukov/go-fuzz v0.0.0-20200318091601-be3528f3a813/go.mod h1:11Gm+ccJ
 github.com/elazarl/go-bindata-assetfs v1.0.0/go.mod h1:v+YaWX3bdea5J/mo8dSETolEo7R71Vk1u8bnjau5yw4=
 github.com/elithrar/simple-scrypt v1.3.0 h1:KIlOlxdoQf9JWKl5lMAJ28SY2URB0XTRDn2TckyzAZg=
 github.com/elithrar/simple-scrypt v1.3.0/go.mod h1:U2XQRI95XHY0St410VE3UjT7vuKb1qPwrl/EJwEqnZo=
+github.com/emirpasic/gods v1.12.0 h1:QAUIPSaCu4G+POclxeqb3F+WPpdKqFGlw36+yOzGlrg=
+github.com/emirpasic/gods v1.12.0/go.mod h1:YfzfFFoVP/catgzJb4IKIqXjX78Ha8FMSDh3ymbK86o=
 github.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
 github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
 github.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=
 github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=
 github.com/felixge/fgprof v0.9.3 h1:VvyZxILNuCiUCSXtPtYmmtGvb65nqXh2QFWc0Wpf2/g=
 github.com/felixge/fgprof v0.9.3/go.mod h1:RdbpDgzqYVh/T9fPELJyV7EYJuHB55UTEULNun8eiPw=
+github.com/flynn/go-shlex v0.0.0-20150515145356-3f9db97f8568/go.mod h1:xEzjJPgXI435gkrCt3MPfRiAkVrwSbHsst4LCFVfpJc=
+github.com/gliderlabs/ssh v0.2.2/go.mod h1:U7qILu1NlMHj9FlMhZLlkCdDnU1DBEAqr0aevW3Awn0=
+github.com/go-git/go-git v4.7.0+incompatible h1:+W9rgGY4DOKKdX2x6HxSR7HNeTxqiKrOvKnuittYVdA=
+github.com/go-git/go-git v4.7.0+incompatible/go.mod h1:6+421e08gnZWn30y26Vchf7efgYLe4dl5OQbBSUXShE=
 github.com/go-ole/go-ole v1.2.6 h1:/Fpf6oFPoeFik9ty7siob0G6Ke8QvQEuVcuChpwXzpY=
 github.com/go-ole/go-ole v1.2.6/go.mod h1:pprOEPIfldk/42T2oK7lQ4v4JSDwmV0As9GaiUsvbm0=
 github.com/golang-jwt/jwt v3.2.1+incompatible h1:73Z+4BJcrTC+KczS6WvTPvRGOp1WmfEP4Q1lOd9Z/+c=
@@ -99,10 +109,15 @@ github.com/ianlancetaylor/demangle v0.0.0-20210905161508-09a460cdf81d/go.mod h1:
 github.com/inconshreveable/mousetrap v1.0.1/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=
 github.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=
 github.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=
+github.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99 h1:BQSFePA1RWJOlocH6Fxy8MmwDt+yVQYULKfN0RoTN8A=
+github.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99/go.mod h1:1lJo3i6rXxKeerYnT8Nvf0QmHCRC1n8sfWVwXF2Frvo=
+github.com/jessevdk/go-flags v1.4.0/go.mod h1:4FA24M0QyGHXBuZZK/XkWh8h0e1EYbRYJSGM75WSRxI=
 github.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=
 github.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=
 github.com/juju/ratelimit v1.0.2 h1:sRxmtRiajbvrcLQT7S+JbqU0ntsb9W2yhSdNN8tWfaI=
 github.com/juju/ratelimit v1.0.2/go.mod h1:qapgC/Gy+xNh9UxzV13HGGl/6UXNN+ct+vwSgWNm/qk=
+github.com/kevinburke/ssh_config v0.0.0-20190725054713-01f96b0aa0cd h1:Coekwdh0v2wtGp9Gmz1Ze3eVRAWJMLokvN3QjdzCHLY=
+github.com/kevinburke/ssh_config v0.0.0-20190725054713-01f96b0aa0cd/go.mod h1:CT57kijsi8u/K/BOFA39wgDQJ9CxiF4nAY/ojJ6r6mM=
 github.com/klauspost/compress v1.15.15 h1:EF27CXIuDsYJ6mmvtBRlEuB2UVOqHG1tAXgZ7yIO+lw=
 github.com/klauspost/compress v1.15.15/go.mod h1:ZcK2JAFqKOpnBlxcLsJzYfrS9X1akm9fHZNnD9+Vo/4=
 github.com/klauspost/cpuid/v2 v2.0.1/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=
@@ -111,6 +126,10 @@ github.com/klauspost/cpuid/v2 v2.2.3 h1:sxCkb+qR91z4vsqw4vGGZlDgPz3G7gjaLyK3V8y7
 github.com/klauspost/cpuid/v2 v2.2.3/go.mod h1:RVVoqg1df56z8g3pUjL/3lE5UfnlrJX8tyFgg4nqhuY=
 github.com/kr/fs v0.1.0 h1:Jskdu9ieNAYnjxsi0LbQp1ulIKZV1LAFgK1tWhpZgl8=
 github.com/kr/fs v0.1.0/go.mod h1:FFnZGqtBN9Gxj7eW1uZ42v5BccTP0vu6NEaFoC2HwRg=
+github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=
+github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
+github.com/kr/pty v1.1.8/go.mod h1:O1sed60cT9XZ5uDucP5qwvh+TE3NnUj51EiZO/lmSfw=
+github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
 github.com/kurin/blazer v0.5.4-0.20230113224640-3887e1ec64b5 h1:OUlGa6AAolmjyPtILbMJ8vHayz5wd4wBUloheGcMhfA=
 github.com/kurin/blazer v0.5.4-0.20230113224640-3887e1ec64b5/go.mod h1:4FCXMUWo9DllR2Do4TtBd377ezyAJ51vB5uTBjt0pGU=
 github.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=
@@ -120,6 +139,8 @@ github.com/minio/minio-go/v7 v7.0.47 h1:sLiuCKGSIcn/MI6lREmTzX91DX/oRau4ia0j6e6e
 github.com/minio/minio-go/v7 v7.0.47/go.mod h1:nCrRzjoSUQh8hgKKtu3Y708OLvRLtuASMg2/nvmbarw=
 github.com/minio/sha256-simd v1.0.0 h1:v1ta+49hkWZyvaKwrQB8elexRqm6Y0aMLjCNsrYxo6g=
 github.com/minio/sha256-simd v1.0.0/go.mod h1:OuYzVNI5vcoYIAmbIvHPl3N3jUzVedXbKy5RFepssQM=
+github.com/mitchellh/go-homedir v1.1.0 h1:lukF9ziXFxDFPkA1vsr5zpc1XuPDn/wFntq5mG+4E0Y=
+github.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=
 github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
 github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=
 github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
@@ -128,7 +149,9 @@ github.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjY
 github.com/modocache/gover v0.0.0-20171022184752-b58185e213c5/go.mod h1:caMODM3PzxT8aQXRPkAt8xlV/e7d7w8GM5g0fa5F0D8=
 github.com/ncw/swift/v2 v2.0.1 h1:q1IN8hNViXEv8Zvg3Xdis4a3c4IlIGezkYz09zQL5J0=
 github.com/ncw/swift/v2 v2.0.1/go.mod h1:z0A9RVdYPjNjXVo2pDOPxZ4eu3oarO1P91fTItcb+Kg=
+github.com/pelletier/go-buffruneio v0.2.0/go.mod h1:JkE26KsDizTr40EUHkXVtNPvgGtbSNq5BcowyYOWdKo=
 github.com/pkg/browser v0.0.0-20210115035449-ce105d075bb4 h1:Qj1ukM4GlMWXNdMBuXcXfz/Kw9s1qm0CLY32QxuSImI=
+github.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
 github.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=
 github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
 github.com/pkg/profile v1.7.0 h1:hnbDkaNWPCLMO9wGLdBFTIZvzDrDfBM2072E1S9gJkA=
@@ -147,17 +170,24 @@ github.com/rs/xid v1.4.0 h1:qd7wPTDkN6KQx2VmMBLrpHkiyQwgFXRnkOLacUiaSNY=
 github.com/rs/xid v1.4.0/go.mod h1:trrq9SKmegXys3aeAKXMUTdJsYXVwGY3RLcfgqegfbg=
 github.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=
 github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
+github.com/sergi/go-diff v1.0.0/go.mod h1:0CfEIISq7TuYL3j771MWULgwwjU+GofnZX9QAmXWZgo=
+github.com/sergi/go-diff v1.3.1 h1:xkr+Oxo4BOQKmkn/B9eMK0g5Kg/983T9DqqPHwYqD+8=
+github.com/sergi/go-diff v1.3.1/go.mod h1:aMJSSKb2lpPvRNec0+w3fl7LP9IOFzdc9Pa4NFbPK1I=
 github.com/sirupsen/logrus v1.9.0 h1:trlNQbNUG3OdDrDil03MCb1H2o9nJ1x4/5LYw7byDE0=
 github.com/sirupsen/logrus v1.9.0/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=
 github.com/spf13/cobra v1.6.1 h1:o94oiPyS4KD1mPy2fmcYYHHfCxLqYjJOhGsCHFZtEzA=
 github.com/spf13/cobra v1.6.1/go.mod h1:IOw/AERYS7UzyrGinqmz6HLUo219MORXGxhbaJUqzrY=
 github.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=
 github.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
+github.com/src-d/gcfg v1.4.0 h1:xXbNR5AlLSA315x2UO+fTSSAXCDf+Ar38/6oyGbDKQ4=
+github.com/src-d/gcfg v1.4.0/go.mod h1:p/UMsR43ujA89BJY9duynAwIpvqEujIH/jFlfL7jWoI=
 github.com/stephens2424/writerset v1.0.2/go.mod h1:aS2JhsMn6eA7e82oNmW4rfsgAOp9COBTTl8mzkwADnc=
 github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
+github.com/stretchr/objx v0.2.0/go.mod h1:qt09Ya8vawLte6SNmTgCsAVtYtaKzEcn8ATUoHMkEqE=
 github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=
 github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=
 github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
+github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=
 github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
@@ -165,10 +195,14 @@ github.com/stretchr/testify v1.8.1 h1:w7B6lhMri9wdJUVmEZPGGhZzrYTPvgJArz7wNPgYKs
 github.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
 github.com/tv42/httpunix v0.0.0-20191220191345-2ba4b9c3382c h1:u6SKchux2yDvFQnDHS3lPnIRmfVJ5Sxy3ao2SIdysLQ=
 github.com/tv42/httpunix v0.0.0-20191220191345-2ba4b9c3382c/go.mod h1:hzIxponao9Kjc7aWznkXaL4U4TWaDSs8zcsY4Ka08nM=
+github.com/xanzy/ssh-agent v0.2.1 h1:TCbipTQL2JiiCprBWx9frJ2eJlCYT00NmctrHxVAr70=
+github.com/xanzy/ssh-agent v0.2.1/go.mod h1:mLlQY/MoOhWBj+gOGMQkOeiEvkx+8pJSI+0Bx9h2kr4=
 github.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 go.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=
 go.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=
+golang.org/x/crypto v0.0.0-20190219172222-a4c6cb3142f2/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
+golang.org/x/crypto v0.0.0-20190701094942-4def268fd1a4/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20211215153901-e495a2d5b3d3/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=
@@ -186,6 +220,7 @@ golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190603091049-60506f45cf65/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=
 golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
+golang.org/x/net v0.0.0-20190724013045-ca1201d0de80/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
 golang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
@@ -202,7 +237,9 @@ golang.org/x/sync v0.1.0 h1:wsuoTGHzEhffawBOhz5CYhcrV4IdKZbEyZjBMuTp12o=
 golang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+golang.org/x/sys v0.0.0-20190221075227-b4e8571b14e0/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190726091711-fc99dfbffb4e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191210023423-ac6580df4449/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
@@ -230,6 +267,7 @@ golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGm
 golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
 golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
 golang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
+golang.org/x/tools v0.0.0-20190729092621-ff9f1409240a/go.mod h1:jcCCGcm9btYwXyDqrUWc6MKQKKGJCWEQ3AfLSRIbEuI=
 golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20200423201157-2723c5de0d66/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
 golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
@@ -270,10 +308,22 @@ google.golang.org/protobuf v1.28.1 h1:d0NfwRgPtno5B1Wa6L2DAG+KivqkdutMf1UhdNx175
 google.golang.org/protobuf v1.28.1/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
+gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
+gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=
+gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/ini.v1 v1.67.0 h1:Dgnx+6+nfE+IfzjUEISNeydPJh9AXNNsWbGP9KzCsOA=
 gopkg.in/ini.v1 v1.67.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=
+gopkg.in/src-d/go-billy.v4 v4.3.2 h1:0SQA1pRztfTFx2miS8sA97XvooFeNOmvUenF4o0EcVg=
+gopkg.in/src-d/go-billy.v4 v4.3.2/go.mod h1:nDjArDMp+XMs1aFAESLRjfGSgfvoYN0hDfzEk0GjC98=
+gopkg.in/src-d/go-git-fixtures.v3 v3.5.0/go.mod h1:dLBcvytrw/TYZsNTWCnkNF2DSIlzWYqTe3rJR56Ac7g=
+gopkg.in/src-d/go-git.v4 v4.13.1 h1:SRtFyV8Kxc0UP7aCHcijOMQGPxHSmMOPrzulQWolkYE=
+gopkg.in/src-d/go-git.v4 v4.13.1/go.mod h1:nx5NYcxdKxq5fpltdHnPa2Exj4Sx0EclMWZQbYDu2z8=
+gopkg.in/warnings.v0 v0.1.2 h1:wFXVbFY8DY5/xOe1ECiWdKCzZlxgshcYVNkBHstARME=
+gopkg.in/warnings.v0 v0.1.2/go.mod h1:jksf8JmL6Qr/oQM2OXTHunEvvTAsrWBLb6OOjuVWRNI=
+gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=
+gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=
 gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
 gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=

From b175308b6684e2b812fd41352f83b6a8a656d794 Mon Sep 17 00:00:00 2001
From: civts <giacomo.zanolli@studenti.unitn.it>
Date: Thu, 2 Mar 2023 11:31:43 +0100
Subject: [PATCH 2/8] Add code to exclude files though .gitignore

It first uses the go-git package to parse the .gitignore files in each
target and create a matcher object, then uses it to determine wether a
file/directory/symlink should be included based on its path
---
 cmd/restic/exclude.go | 68 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 68 insertions(+)

diff --git a/cmd/restic/exclude.go b/cmd/restic/exclude.go
index efe6f41e49f..bff328af811 100644
--- a/cmd/restic/exclude.go
+++ b/cmd/restic/exclude.go
@@ -11,6 +11,7 @@ import (
 	"strings"
 	"sync"
 
+	"github.com/go-git/go-git/plumbing/format/gitignore"
 	"github.com/restic/restic/internal/debug"
 	"github.com/restic/restic/internal/errors"
 	"github.com/restic/restic/internal/filter"
@@ -18,6 +19,7 @@ import (
 	"github.com/restic/restic/internal/repository"
 	"github.com/restic/restic/internal/textfile"
 	"github.com/spf13/pflag"
+	"gopkg.in/src-d/go-billy.v4/osfs"
 )
 
 type rejectionCache struct {
@@ -414,6 +416,72 @@ func parseSizeStr(sizeStr string) (int64, error) {
 	return value * unit, nil
 }
 
+// Returns a RejectByNameFunc that rejects any file or
+// directory which has been excluded through .gitignore files
+func rejectGitignored(targets []string) (RejectByNameFunc, error) {
+	var patterns []gitignore.Pattern
+
+	fs := osfs.New("/")
+	for _, target := range targets {
+
+		parts, err := pathToArray(target)
+		if err != nil {
+			return nil, err
+		}
+
+		patternsNow, err := gitignore.ReadPatterns(fs, parts)
+		if err != nil {
+			return nil, err
+		}
+
+		patterns = append(patterns, patternsNow...)
+	}
+
+	matcher := gitignore.NewMatcher(patterns)
+
+	return func(filename string) bool {
+		isDir := isDir(filename)
+		p, err := pathToArray(filename)
+		if err != nil {
+			return false
+		}
+		return matcher.Match(p, isDir)
+	}, nil
+}
+
+// Returns if this path is a directory or not
+func isDir(filename string) bool {
+	file, err := os.Open(filename)
+	if err != nil {
+		return false
+	}
+	defer file.Close()
+	fileInfo, err := file.Stat()
+	if err != nil {
+		return false
+	}
+	isDir := fileInfo.IsDir()
+	return isDir
+}
+
+func pathToArray(path string) ([]string, error) {
+	absolute, err := filepath.Abs(path)
+	if err != nil {
+		return nil, err
+	}
+	parts := strings.Split(absolute, string(filepath.Separator))
+
+	//Filter out empty strings
+	result := []string{}
+	for _, p := range parts {
+		if p != "" {
+			result = append(result, p)
+		}
+	}
+
+	return result, nil
+}
+
 // readExcludePatternsFromFiles reads all exclude files and returns the list of
 // exclude patterns. For each line, leading and trailing white space is removed
 // and comment lines are ignored. For each remaining pattern, environment

From be5c7f6605f622ed51eed0388071e5a52b9a2ed0 Mon Sep 17 00:00:00 2001
From: civts <giacomo.zanolli@studenti.unitn.it>
Date: Thu, 2 Mar 2023 11:32:41 +0100
Subject: [PATCH 3/8] Add CLI flag to enable excluding from gitignore

---
 cmd/restic/cmd_backup.go | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/cmd/restic/cmd_backup.go b/cmd/restic/cmd_backup.go
index 1244e2ed12d..0fb161484b9 100644
--- a/cmd/restic/cmd_backup.go
+++ b/cmd/restic/cmd_backup.go
@@ -95,6 +95,7 @@ type BackupOptions struct {
 	ExcludeIfPresent  []string
 	ExcludeCaches     bool
 	ExcludeLargerThan string
+	ExcludeGitignored bool
 	Stdin             bool
 	StdinFilename     string
 	Tags              restic.TagLists
@@ -132,6 +133,7 @@ func init() {
 	f.StringArrayVar(&backupOptions.ExcludeIfPresent, "exclude-if-present", nil, "takes `filename[:header]`, exclude contents of directories containing filename (except filename itself) if header of that file is as provided (can be specified multiple times)")
 	f.BoolVar(&backupOptions.ExcludeCaches, "exclude-caches", false, `excludes cache directories that are marked with a CACHEDIR.TAG file. See https://bford.info/cachedir/ for the Cache Directory Tagging Standard`)
 	f.StringVar(&backupOptions.ExcludeLargerThan, "exclude-larger-than", "", "max `size` of the files to be backed up (allowed suffixes: k/K, m/M, g/G, t/T)")
+	f.BoolVar(&backupOptions.ExcludeGitignored, "exclude-gitignored", false, "excludes from the backup any file or directory which is ignored through a `.gitignore`. Files and directories which are specified directly (through file args, `files-from` or `files-from-x` arguments) are always included.")
 	f.BoolVar(&backupOptions.Stdin, "stdin", false, "read backup from stdin")
 	f.StringVar(&backupOptions.StdinFilename, "stdin-filename", "stdin", "`filename` to use when reading from stdin")
 	f.Var(&backupOptions.Tags, "tag", "add `tags` for the new snapshot in the format `tag[,tag,...]` (can be specified multiple times)")
@@ -338,6 +340,14 @@ func collectRejectByNameFuncs(opts BackupOptions, repo *repository.Repository, t
 		fs = append(fs, f)
 	}
 
+	if opts.ExcludeGitignored {
+		f, err := rejectGitignored(targets)
+		if err != nil {
+			return nil, err
+		}
+		fs = append(fs, f)
+	}
+
 	return fs, nil
 }
 

From 3d57aacc7752a836c49cc955d09ca5b6698d0afc Mon Sep 17 00:00:00 2001
From: civts <giacomo.zanolli@studenti.unitn.it>
Date: Thu, 2 Mar 2023 11:34:54 +0100
Subject: [PATCH 4/8] Add tests for the rejectGitignored function

---
 cmd/restic/exclude_test.go | 517 +++++++++++++++++++++++++++++++++++++
 1 file changed, 517 insertions(+)

diff --git a/cmd/restic/exclude_test.go b/cmd/restic/exclude_test.go
index 050a083e4ca..7c96771804d 100644
--- a/cmd/restic/exclude_test.go
+++ b/cmd/restic/exclude_test.go
@@ -1,6 +1,7 @@
 package main
 
 import (
+	"fmt"
 	"os"
 	"path/filepath"
 	"testing"
@@ -315,6 +316,522 @@ func TestIsExcludedByFileSize(t *testing.T) {
 	}
 }
 
+// TestIsExcludedByGitignore is for testing the workings of
+// the --exclude-gitignored flag
+func TestIsExcludedByGitignore(t *testing.T) {
+	tempDir := test.TempDir(t)
+
+	type File struct {
+		path    string
+		include bool
+	}
+
+	type Gitignore struct {
+		directory string
+		content   string
+		include   bool
+	}
+
+	type Case struct {
+		gitignores []Gitignore
+		files      []File
+	}
+
+	cases := []Case{
+		{
+			gitignores: []Gitignore{
+				{
+					directory: ".",
+					content: `
+#42
+excludeme
+					`,
+					include: true,
+				},
+			},
+			files: []File{
+				{path: "42", include: true},
+				{path: "excludeme", include: false},
+			},
+		},
+		{
+			gitignores: []Gitignore{
+				{
+					directory: ".",
+					content: `
+#Should consider the following as a re-include pattern
+!includeme\!.txt
+					`,
+					include: true,
+				},
+			},
+			files: []File{
+				{path: "!includeme!.txt", include: true},
+			},
+		},
+		{
+			gitignores: []Gitignore{
+				{
+					directory: ".",
+					content: `
+# Should be able to exclude files with special characters in the name by escaping them
+\!excludeme_too\!.txt
+\!excludeme!.txt
+\#excludeme.txt
+#The trailing space in the following line is important
+final_space\ 
+\!excludeme_also!.txt
+					`,
+					include: true,
+				},
+			},
+			files: []File{
+				{path: "!excludeme_too!.txt", include: false},
+				{path: "!excludeme_also!.txt", include: false},
+				{path: "!excludeme!.txt", include: false},
+				{path: "#excludeme.txt", include: false},
+				{path: "final_space ", include: false},
+			},
+		},
+		{
+			gitignores: []Gitignore{
+				{
+					directory: ".",
+					content: `
+# Trailing slash should match a directory but not a file
+excludeme/
+# Trailing slash should match a directory but not a file
+includeme_f/
+`,
+					include: true,
+				},
+			},
+			files: []File{
+				{path: "excludeme/.gitkeep", include: false},
+				{path: "includeme_f", include: true},
+			},
+		},
+		{
+			gitignores: []Gitignore{
+				{
+					directory: ".",
+					content: `
+# Should expand pattern and exclude these
+excludeme_*.txt
+					`,
+					include: true,
+				},
+			},
+			files: []File{
+				{path: "excludeme_1.txt", include: false},
+				{path: "excludeme_2.txt", include: false},
+				{path: "excludeme_200.txt", include: false},
+			},
+		},
+		{
+			gitignores: []Gitignore{
+				{
+					directory: ".",
+					content: `
+# Should not be able to re-include since parent directory is excluded
+bardir
+#!bardir/barsub/
+
+# Should be able to re-include since parent directory is not excluded
+foodir/*
+!foodir/foosub
+
+					`,
+					include: true,
+				},
+				{
+					directory: "bardir",
+					content: `
+#Should have no effect, and not be included in the backup
+#since barsub is excluded in the parent directory
+!basrub
+					`,
+					include: false,
+				},
+			},
+			files: []File{
+				{path: "foodir/foosub/includeme.txt", include: true},
+				{path: "foodir/excludeme.txt", include: false},
+				// {path: "bardir/barsub/excludeme.txt", include: false}, https://github.com/go-git/go-git/issues/694
+				{path: "bardir/excludeme_1.txt", include: false},
+				{path: "bardir/excludeme_2.txt", include: false},
+			},
+		},
+		{
+			gitignores: []Gitignore{
+				{
+					directory: ".",
+					content: `
+bardir
+					`,
+					include: true,
+				},
+				{
+					directory: "bardir",
+					content: `
+#Should have no effect, and not be included in the backup
+#since barsub is excluded in the parent directory
+!basrub
+					`,
+					include: false,
+				},
+			},
+			files: []File{
+				{path: "bardir/barsub/excludeme.txt", include: false},
+				{path: "bardir/excludeme_1.txt", include: false},
+				{path: "bardir/excludeme_2.txt", include: false},
+			},
+		},
+		{
+			gitignores: []Gitignore{
+				{
+					directory: ".",
+					content: `
+# Leading slash matches in current directory but not in subdirectories
+/*.c
+					`,
+					include: true,
+				},
+			},
+			files: []File{
+				{path: "excludeme.c", include: false},
+				{path: "foo/includeme.c", include: true},
+			},
+		},
+		{
+			gitignores: []Gitignore{},
+			files: []File{
+				{path: "foo", include: true},
+				{path: "anotherfoo", include: true},
+				{path: "foosub/underfoo", include: true},
+			},
+		},
+		{
+			gitignores: []Gitignore{
+				{
+					directory: ".",
+					content: `
+#This file should not be included in the backup
+.gitignore
+					`,
+					include: false,
+				},
+			}, files: []File{},
+		},
+		{
+			gitignores: []Gitignore{
+				{
+					directory: ".",
+					content:   "excludeme",
+					include:   true,
+				},
+			},
+			files: []File{
+				{path: "excludeme", include: false},
+				{path: "foo/excludeme", include: false},
+				{path: "foo/foosub/excludeme", include: false},
+				{path: "bar/excludeme", include: false},
+				{path: "bar/barsub/excludeme", include: false},
+				{path: "includeme", include: true},
+				{path: "foo/includeme", include: true},
+				{path: "foo/foosub/includeme", include: true},
+				{path: "bar/includeme", include: true},
+				{path: "bar/barsub/includeme", include: true},
+			},
+		},
+		{
+			gitignores: []Gitignore{
+				{
+					directory: ".",
+					content:   "*",
+					include:   false,
+				},
+			},
+			files: []File{
+				{path: "excludeme", include: false},
+				{path: "foo/excludeme", include: false},
+				{path: "foo/foosub/excludeme", include: false},
+				{path: "bar/excludeme", include: false},
+				{path: "bar/barsub/excludeme", include: false},
+			},
+		},
+		{
+			gitignores: []Gitignore{
+				{
+					directory: ".",
+					content: `
+# A space before the asterisk makes it so that it does not match
+	*
+					`,
+					include: true,
+				},
+			},
+			files: []File{
+				{path: "includeme", include: true},
+				{path: "foo/includeme", include: true},
+				{path: "foo/foosub/includeme", include: true},
+				{path: "bar/includeme", include: true},
+				{path: "bar/barsub/includeme", include: true},
+			},
+		},
+		{
+			gitignores: []Gitignore{
+				{
+					directory: "foo",
+					content: `
+bar
+					`,
+					include: true,
+				},
+			},
+			files: []File{
+				{path: "bar", include: true},
+				{path: "foo/bar", include: false},
+			},
+		},
+		{
+			gitignores: []Gitignore{
+				{
+					directory: ".",
+					content: `
+**build/
+					`,
+					include: true,
+				},
+			},
+			files: []File{
+				{path: "foo/foobuild/excludeme", include: false},
+				{path: "foo/foobar/includeme", include: true},
+			},
+		},
+	}
+
+	// Test that when we specify one case as the only target it is handled properly
+	for i, c := range cases {
+		var errs []error
+		baseDir := filepath.Join(tempDir, fmt.Sprintf("%d", i))
+		for _, f := range c.files {
+			// create directories first, then the file
+			p := filepath.Join(baseDir, filepath.FromSlash(f.path))
+			errs = append(errs, os.MkdirAll(filepath.Dir(p), 0700))
+			file, err := os.OpenFile(p, os.O_CREATE, 0600)
+			errs = append(errs, err)
+			errs = append(errs, file.Close())
+		}
+		test.OKs(t, errs) // see if anything went wrong during the creation
+		for _, f := range c.gitignores {
+			// create directories first, then the file
+			p := filepath.Join(baseDir, filepath.FromSlash(f.directory), ".gitignore")
+			errs = append(errs, os.MkdirAll(filepath.Dir(p), 0700))
+			file, err := os.OpenFile(p, os.O_RDWR|os.O_CREATE, 0600)
+			errs = append(errs, err)
+			_, err = file.WriteString(f.content)
+			errs = append(errs, err)
+			errs = append(errs, file.Close())
+		}
+		test.OKs(t, errs) // see if anything went wrong during the creation
+
+		// create rejection function
+		checkExcludeGitignore, err := rejectGitignored([]string{baseDir})
+		test.OK(t, err)
+
+		// To mock the archiver scanning walk, we create filepath.WalkFn
+		// that tests against the two rejection functions and stores
+		// the result in a map against we can test later.
+		includedFiles := make(map[string]bool)
+		walk := func(p string, fi os.FileInfo, err error) error {
+			if err != nil {
+				return err
+			}
+
+			excluded := checkExcludeGitignore(p)
+			// The log message helps debugging in case the test fails
+			// t.Logf("%q: dir:%t; excluded:%v", p, fi.IsDir(), excluded)
+			includedFiles[p] = !excluded
+			return nil
+		}
+		// Walk through the temporary file and check the error
+		test.OK(t, filepath.Walk(baseDir, walk))
+
+		// Compare whether the walk gave the expected values for the test cases
+		for _, f := range c.files {
+			p := filepath.Join(baseDir, filepath.FromSlash(f.path))
+			if includedFiles[p] != f.include {
+				t.Errorf("inclusion status of %s is wrong: want %v, got %v", f.path, f.include, includedFiles[p])
+			}
+		}
+		for _, f := range c.gitignores {
+			// create directories first, then the file
+			p := filepath.Join(baseDir, filepath.FromSlash(f.directory), ".gitignore")
+			if includedFiles[p] != f.include {
+				t.Errorf("inclusion status of %s is wrong: want %v, got %v", p, f.include, includedFiles[p])
+			}
+		}
+	}
+
+	// Test that a combination of multiple targets gets handled correctly
+	for casesToConsider := 1; casesToConsider < len(cases); casesToConsider += 1 {
+		os.RemoveAll(filepath.Join(tempDir, "/*"))
+		var errs []error
+		var baseDirs []string
+		casesNow := cases[:casesToConsider]
+		for i, c := range casesNow {
+			baseDir := filepath.Join(tempDir, fmt.Sprintf("%d", i))
+			for _, f := range c.files {
+				// create directories first, then the file
+				p := filepath.Join(baseDir, filepath.FromSlash(f.path))
+				errs = append(errs, os.MkdirAll(filepath.Dir(p), 0700))
+				file, err := os.OpenFile(p, os.O_CREATE, 0600)
+				errs = append(errs, err)
+				errs = append(errs, file.Close())
+			}
+			test.OKs(t, errs) // see if anything went wrong during the creation
+			for _, f := range c.gitignores {
+				// create directories first, then the file
+				p := filepath.Join(baseDir, filepath.FromSlash(f.directory), ".gitignore")
+				errs = append(errs, os.MkdirAll(filepath.Dir(p), 0700))
+				file, err := os.OpenFile(p, os.O_RDWR|os.O_CREATE, 0600)
+				errs = append(errs, err)
+				_, err = file.WriteString(f.content)
+				errs = append(errs, err)
+				errs = append(errs, file.Close())
+			}
+			test.OKs(t, errs) // see if anything went wrong during the creation
+			baseDirs = append(baseDirs, baseDir)
+		}
+
+		// create rejection function
+		checkExcludeGitignore, err := rejectGitignored(baseDirs)
+		test.OK(t, err)
+
+		for i, c := range casesNow {
+
+			baseDir := filepath.Join(tempDir, fmt.Sprintf("%d", i))
+
+			// To mock the archiver scanning walk, we create filepath.WalkFn
+			// that tests against the two rejection functions and stores
+			// the result in a map against we can test later.
+			includedFiles := make(map[string]bool)
+			walk := func(p string, fi os.FileInfo, err error) error {
+				if err != nil {
+					return err
+				}
+
+				excluded := checkExcludeGitignore(p)
+				// The log message helps debugging in case the test fails
+				// t.Logf("%q: dir:%t; excluded:%v", p, fi.IsDir(), excluded)
+				includedFiles[p] = !excluded
+				return nil
+			}
+			// Walk through the temporary file and check the error
+			test.OK(t, filepath.Walk(baseDir, walk))
+
+			// Compare whether the walk gave the expected values for the test cases
+			for _, f := range c.files {
+				p := filepath.Join(baseDir, filepath.FromSlash(f.path))
+				if includedFiles[p] != f.include {
+					t.Errorf("inclusion status of %s is wrong: want %v, got %v", f.path, f.include, includedFiles[p])
+				}
+			}
+			for _, f := range c.gitignores {
+				// create directories first, then the file
+				p := filepath.Join(baseDir, filepath.FromSlash(f.directory), ".gitignore")
+				if includedFiles[p] != f.include {
+					t.Errorf("inclusion status of %s is wrong: want %v, got %v", p, f.include, includedFiles[p])
+				}
+			}
+		}
+	}
+
+	//Test that we can specify the target with a variety of paths
+	casePathTest := Case{
+		files: []File{
+			{path: "test/subdir/includeme", include: true},
+			{path: "test/excludeme", include: false},
+		},
+		gitignores: []Gitignore{
+			{
+				directory: ".",
+				content:   "excludeme",
+				include:   true,
+			},
+		},
+	}
+	var errs []error
+	baseDir := tempDir
+	for _, f := range casePathTest.files {
+		// create directories first, then the file
+		p := filepath.Join(baseDir, filepath.FromSlash(f.path))
+		errs = append(errs, os.MkdirAll(filepath.Dir(p), 0700))
+		file, err := os.OpenFile(p, os.O_CREATE, 0600)
+		errs = append(errs, err)
+		errs = append(errs, file.Close())
+	}
+	test.OKs(t, errs) // see if anything went wrong during the creation
+	for _, f := range casePathTest.gitignores {
+		// create directories first, then the file
+		p := filepath.Join(baseDir, filepath.FromSlash(f.directory), ".gitignore")
+		errs = append(errs, os.MkdirAll(filepath.Dir(p), 0700))
+		file, err := os.OpenFile(p, os.O_RDWR|os.O_CREATE, 0600)
+		errs = append(errs, err)
+		_, err = file.WriteString(f.content)
+		errs = append(errs, err)
+		errs = append(errs, file.Close())
+	}
+	test.OKs(t, errs) // see if anything went wrong during the creation
+
+	paths := []string{
+		filepath.Join(tempDir, "/"),
+		filepath.Join(tempDir, "/./"),
+		filepath.Join(tempDir, "/test/.."),
+		filepath.Join(tempDir, "/test/./subdir/./../subdir/../.."),
+		filepath.Join(tempDir, "/test/./subdir/./../subdir/.././../"),
+	}
+	for _, p := range paths {
+		// create rejection function
+		checkExcludeGitignore, err := rejectGitignored([]string{p})
+		test.OK(t, err)
+
+		// To mock the archiver scanning walk, we create filepath.WalkFn
+		// that tests against the two rejection functions and stores
+		// the result in a map against we can test later.
+		includedFiles := make(map[string]bool)
+		walk := func(p string, fi os.FileInfo, err error) error {
+			if err != nil {
+				return err
+			}
+
+			excluded := checkExcludeGitignore(p)
+			// The log message helps debugging in case the test fails
+			// t.Logf("%q: dir:%t; excluded:%v", p, fi.IsDir(), excluded)
+			includedFiles[p] = !excluded
+			return nil
+		}
+		// Walk through the temporary file and check the error
+		test.OK(t, filepath.Walk(baseDir, walk))
+
+		// Compare whether the walk gave the expected values for the test cases
+		for _, f := range casePathTest.files {
+			p := filepath.Join(baseDir, filepath.FromSlash(f.path))
+			if includedFiles[p] != f.include {
+				t.Errorf("inclusion status of %s is wrong: want %v, got %v", f.path, f.include, includedFiles[p])
+			}
+		}
+		for _, f := range casePathTest.gitignores {
+			// create directories first, then the file
+			p := filepath.Join(baseDir, filepath.FromSlash(f.directory), ".gitignore")
+			if includedFiles[p] != f.include {
+				t.Errorf("inclusion status of %s is wrong: want %v, got %v", p, f.include, includedFiles[p])
+			}
+		}
+	}
+}
+
 func TestDeviceMap(t *testing.T) {
 	deviceMap := DeviceMap{
 		filepath.FromSlash("/"):          1,

From f2dc8ec9de2ab6097416ed06600aa3ade8b69d06 Mon Sep 17 00:00:00 2001
From: civts <giacomo.zanolli@studenti.unitn.it>
Date: Thu, 2 Mar 2023 23:28:29 +0100
Subject: [PATCH 5/8] Add changelog entry

---
 changelog/unreleased/issue-1514 | 11 +++++++++++
 1 file changed, 11 insertions(+)
 create mode 100644 changelog/unreleased/issue-1514

diff --git a/changelog/unreleased/issue-1514 b/changelog/unreleased/issue-1514
new file mode 100644
index 00000000000..c8c581a79a7
--- /dev/null
+++ b/changelog/unreleased/issue-1514
@@ -0,0 +1,11 @@
+Enhancement: Add the ability to use .gitignore files for excluding files
+
+Restic did not have the capability to parse `.gitignore`
+files.
+
+The new optional flag -`-exclude-gitignored` tells
+restic to take into account any `.gitignore` file
+it finds and use it to exclude entities from the backup.
+
+https://github.com/restic/restic/issues/1514
+https://github.com/restic/restic/pull/4227

From 492b8f437823320952a218b94f9978b277d825f7 Mon Sep 17 00:00:00 2001
From: civts <giacomo.zanolli@studenti.unitn.it>
Date: Thu, 2 Mar 2023 23:29:30 +0100
Subject: [PATCH 6/8] Add documentation entry for --exclude-gitignored

---
 doc/040_backup.rst | 1 +
 1 file changed, 1 insertion(+)

diff --git a/doc/040_backup.rst b/doc/040_backup.rst
index 3b1a56bd6f5..7793548fbab 100644
--- a/doc/040_backup.rst
+++ b/doc/040_backup.rst
@@ -229,6 +229,7 @@ the exclude options are:
 -  ``--iexclude-file`` Same as ``exclude-file`` but ignores cases like in ``--iexclude``
 -  ``--exclude-if-present foo`` Specified one or more times to exclude a folder's content if it contains a file called ``foo`` (optionally having a given header, no wildcards for the file name supported)
 -  ``--exclude-larger-than size`` Specified once to excludes files larger than the given size
+-  ``--exclude-gitignored`` Specified once to exclude all the files that have been excluded through `.gitignore` files. Please note that whilst the majority of common patterns are covered, the parser is not perfect yet. See, for example issues `#694 <https://github.com/go-git/go-git/issues/694>`__ and `#154 <https://github.com/go-git/go-git/issues/154>`__.
 
 Please see ``restic help backup`` for more specific information about each exclude option.
 

From 0df6f615cc64fd60827b0508677a55dfec7bd42c Mon Sep 17 00:00:00 2001
From: civts <giacomo.zanolli@studenti.unitn.it>
Date: Thu, 2 Mar 2023 23:30:44 +0100
Subject: [PATCH 7/8] Add bash completion for --exclude-gitignored

---
 doc/bash-completion.sh | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/doc/bash-completion.sh b/doc/bash-completion.sh
index 42f459f65f1..c4a1a304ffe 100644
--- a/doc/bash-completion.sh
+++ b/doc/bash-completion.sh
@@ -398,6 +398,8 @@ _restic_backup()
     two_word_flags+=("--exclude-larger-than")
     local_nonpersistent_flags+=("--exclude-larger-than")
     local_nonpersistent_flags+=("--exclude-larger-than=")
+    flags+=("--exclude-gitignored")
+    local_nonpersistent_flags+=("--exclude-gitignored")
     flags+=("--files-from=")
     two_word_flags+=("--files-from")
     local_nonpersistent_flags+=("--files-from")

From 6922af5ba5d18fd00ece27bc23f142c474d3f6c9 Mon Sep 17 00:00:00 2001
From: civts <giacomo.zanolli@studenti.unitn.it>
Date: Thu, 2 Mar 2023 23:31:11 +0100
Subject: [PATCH 8/8] Add man entry for --exclude-gitignored

---
 doc/man/restic-backup.1 | 4 ++++
 doc/manual_rest.rst     | 1 +
 2 files changed, 5 insertions(+)

diff --git a/doc/man/restic-backup.1 b/doc/man/restic-backup.1
index 2598678d0a5..80b1bea595c 100644
--- a/doc/man/restic-backup.1
+++ b/doc/man/restic-backup.1
@@ -49,6 +49,10 @@ Exit status is 3 if some source data could not be read (incomplete snapshot crea
 \fB--exclude-larger-than\fP=""
 	max \fB\fCsize\fR of the files to be backed up (allowed suffixes: k/K, m/M, g/G, t/T)
 
+.PP
+\fB-n\fP, \fB--exclude-gitignored\fP[=false]
+	excludes anything (file, directory, symlink) that would be ignored by git
+
 .PP
 \fB--files-from\fP=[]
 	read the files to backup from \fB\fCfile\fR (can be combined with file args; can be specified multiple times)
diff --git a/doc/manual_rest.rst b/doc/manual_rest.rst
index 97480db80db..7494270fa94 100644
--- a/doc/manual_rest.rst
+++ b/doc/manual_rest.rst
@@ -101,6 +101,7 @@ command:
           --exclude-file file                      read exclude patterns from a file (can be specified multiple times)
           --exclude-if-present filename[:header]   takes filename[:header], exclude contents of directories containing filename (except filename itself) if header of that file is as provided (can be specified multiple times)
           --exclude-larger-than size               max size of the files to be backed up (allowed suffixes: k/K, m/M, g/G, t/T)
+          --exclude-gitignored                     exclude anything (file, directory, symlink) that would be ignored by git
           --files-from file                        read the files to backup from file (can be combined with file args; can be specified multiple times)
           --files-from-raw file                    read the files to backup from file (can be combined with file args; can be specified multiple times)
           --files-from-verbatim file               read the files to backup from file (can be combined with file args; can be specified multiple times)
